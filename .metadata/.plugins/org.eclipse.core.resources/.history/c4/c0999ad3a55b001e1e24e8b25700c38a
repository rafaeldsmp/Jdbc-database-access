package com.github.model.dao.implementation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.github.model.dao.SellerDao;
import com.github.model.entities.Department;
import com.github.model.entities.Seller;

import db.DB;
import db.DbException;

public class SellerDaoJDBC implements SellerDao {

	// TODO: NÃO PRECISA DE CRIAR UM OBJETO CONECTION
	// O NOSSO DAO VAI TER UMA DEPENDENCIA COM A CONEXÃO
	// conn será disponível em qualquer área
	private Connection conn;

	// TODO: PARA FORÇAR A DEPENDÊNCIA DO CONSTRUTOR
	public SellerDaoJDBC(Connection conn) {
		this.conn = conn;
	}

	@Override
	public void insert(Seller obj) {
		PreparedStatement st = null;
		try {
			st = conn.prepareStatement("INSERT INTO seller" + "(Name, Email, BirthDate, BaseSalary, DepartmentId) "
					+ "VALUES " + "(?, ?, ?, ?, ?)", Statement.RETURN_GENERATED_KEYS); // retorna a key do usuário
																						// criado

			st.setString(1, obj.getName());
			st.setString(2, obj.getEmail());
			st.setDate(3, new java.sql.Date(obj.getBirthDate().getTime()));
			st.setDouble(4, obj.getBaseSalary());
			st.setInt(5, obj.getDepartment().getId()); // tem que navegar no objeto para pegar o department

			int rowsAffected = st.executeUpdate();
			if (rowsAffected > 0) {
				ResultSet rs = st.getGeneratedKeys();
				if (rs.next()) {
					int id = rs.getInt(1); // vou pegar o valor do id gerado vou pegar a posição 1 que é a primeira
					obj.setId(id); // atribui o id gerado dentro do objeto obj para que o objeto fique populado com
									// o novo id dele
				}
				DB.closeResultSet(rs);
			} else {
				throw new DbException("Unexpected error! no rows affected!");
			}

		} catch (SQLException e) {
			throw new DbException(e.getMessage());
		} finally {
			DB.closeStatement(st);
		}
	}

	@Override
	public void update(Seller obj) {
		PreparedStatement st = null;
		try {
			st = conn.prepareStatement("UPDATE seller "
					+ "SET Name = ?, Email = ?, BirthDate = ?, BaseSalary = ?, DepartmentId = ? "
					+ "WHERE Id = ? ");

			st.setString(1, obj.getName());
			st.setString(2, obj.getEmail());
			st.setDate(3, new java.sql.Date(obj.getBirthDate().getTime()));
			st.setDouble(4, obj.getBaseSalary());
			st.setInt(5, obj.getDepartment().getId()); 
			st.setInt(6, obj.getId());			
			
			st.executeUpdate();
		} catch (SQLException e) {
			throw new DbException(e.getMessage());
			
		} finally {
			DB.closeStatement(st);
		}
	}

	@Override
	public void deleteById(Integer id) {
		PreparedStatement st = null;
		ResultSet rs = null;
		try {
			st = conn.prepareStatement("DELETE FROM seller WHERE Id = ?");
			st.setInt(1, id);
			
			st.executeUpdate();
		}
		catch (SQLException e) {
			throw new DbException(e.getMessage());
		}
		finally {
			DB.closeStatement(st);
		}
		
	}

	@Override
	public Seller findById(Integer id) {
		PreparedStatement st = null;
		ResultSet rs = null; // ESTÁ APONTADO NA POSIÇÃO 0 QUE NÃO TEM ELEMENTO
		try {
			st = conn.prepareStatement(
					"SELECT seller.*,department.Name as DepName " + "FROM seller INNER JOIN department "
							+ "ON seller.DepartmentId = department.Id " + "WHERE seller.Id = ?");
			st.setInt(1, id);
			rs = st.executeQuery();
			// TODO: QUANDO ACESSAMOS TEREMOS QUE TER OS OBJETOSINSTANCIADOS EM MEMÓRIA
			// TEREMOS QUE CRIAR UM OBJETO ASSOCIADO QUE É O SELLER ASSOCIADO AOS DEPARTMENT
			if (rs.next()) { // rs.next é para testar se veio algum resultado se não tiver vai dar falso
//				Department dep = new Department();// instanciamos um departamento
//				dep.setId(rs.getInt("DepartmentId"));// setamos os valores
//				dep.setName(rs.getString("DepName"));
//				Seller obj = new Seller();
//				obj.setId(rs.getInt("Id"));
//				obj.setName(rs.getString("Name"));
//				obj.setEmail(rs.getString("Email"));
//				obj.setBaseSalary(rs.getDouble("BaseSalary"));
//				obj.setBirthDate(rs.getDate("BirthDate"));
//				obj.setDepartment(dep); // não é o ID department é o objeto inteiro na hroa de fazer o set vai querer o
//										// objeto department montado

				// TODO: PARA NÃO FICAR UM CÓDIGO VERBOSO QUE NEM O ACIMA SERÁ REFATORADA NO
				// MODELO:
				Department dep = instantiateDepartment(rs);
				Seller obj = instantiateSeller(rs, dep);
				return obj;
			}
		} catch (SQLException e) {
			throw new DbException(e.getMessage());
		} finally {
			DB.closeStatement(st);
			DB.closeResultSet(rs);
			// não precisa fechar a conexão pois o mesmo objeto Dao pode servir para outra
			// operação
		}
		return null;
	}

	private Seller instantiateSeller(ResultSet rs, Department dep) throws SQLException {
		Seller obj = new Seller();
		obj.setId(rs.getInt("Id"));
		obj.setName(rs.getString("Name"));
		obj.setEmail(rs.getString("Email"));
		obj.setBaseSalary(rs.getDouble("BaseSalary"));
		obj.setBirthDate(rs.getDate("BirthDate"));
		obj.setDepartment(dep);
		return (obj);
	}

	private Department instantiateDepartment(ResultSet rs) throws SQLException {
		Department dep = new Department();
		dep.setId(rs.getInt("DepartmentId"));// Vai dar erro por não ser tratada as exceções no entanto ea já está sendo
												// tratada acima
		dep.setName(rs.getString("DepName"));
		return dep;
	}

	@Override
	public List<Seller> findAll() {

		PreparedStatement st = null;
		ResultSet rs = null;
		try {
			st = conn.prepareStatement(
					"SELECT seller.*,department.Name as DepName " + "FROM seller INNER JOIN department "
							+ "ON seller.DepartmentId = department.Id " + "ORDER BY Name");

			rs = st.executeQuery();

			List<Seller> list = new ArrayList<>();

			Map<Integer, Department> map = new HashMap<>();
			while (rs.next()) {

				Department dep = map.get(rs.getInt("DepartmentId"));

				if (dep == null) {
					dep = instantiateDepartment(rs);
					map.put(rs.getInt("DepartmentId"), dep);

				}

				Seller obj = instantiateSeller(rs, dep);
				list.add(obj);
			}
			return list;
		} catch (SQLException e) {
			throw new DbException(e.getMessage());
		} finally {
			DB.closeStatement(st);
			DB.closeResultSet(rs);
			// não precisa fechar a conexão pois o mesmo objeto Dao pode servir para outra
			// operação
		}
	}

	@Override
	public List<Seller> findByDepartment(Department department) {

		PreparedStatement st = null;
		ResultSet rs = null; // ESTÁ APONTADO NA POSIÇÃO 0 QUE NÃO TEM ELEMENTO
		try {
			st = conn.prepareStatement(
					"SELECT seller.*,department.Name as DepName " + "FROM seller INNER JOIN department "
							+ "ON seller.DepartmentId = department.Id " + "WHERE DepartmentId = ? " + "ORDER BY Name");

			st.setInt(1, department.getId());

			rs = st.executeQuery();

			List<Seller> list = new ArrayList<>();

//			while (rs.next()) { //se deixar essa implementação ele irá criar um novo departamento para um novo seller
//				Department dep = instantiateDepartment(rs);
//				Seller obj = instantiateSeller(rs, dep);
//				list.add(obj);
//			}
			// map estrutura chave valor
			Map<Integer, Department> map = new HashMap<>(); // usar map para controlar a estrutura de repetição de chave
															// e valor
			while (rs.next()) {

				// testar se o departamento já existe
				Department dep = map.get(rs.getInt("DepartmentId"));

				if (dep == null) { // se o departamento nao existir o mapget vai voltar nulo para variavel dep o if
									// vai para o if e irá instanciar
					dep = instantiateDepartment(rs);
					map.put(rs.getInt("DepartmentId"), dep); // agora vou salvar o departamento dentro do map para a
																// proxima vez verificar que já existe
					// vai salvar o departamento no map
				}

				Seller obj = instantiateSeller(rs, dep);
				list.add(obj);
			}
			return list;
		} catch (SQLException e) {
			throw new DbException(e.getMessage());
		} finally {
			DB.closeStatement(st);
			DB.closeResultSet(rs);
			// não precisa fechar a conexão pois o mesmo objeto Dao pode servir para outra
			// operação
		}
	}

}
